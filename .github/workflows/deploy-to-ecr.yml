# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# GitHub recommends pinning actions to a commit SHA.
# To get a newer version, you will need to update the SHA.
# You can also reference a tag or branch, but the action may change without warning.

name: Deploy to Amazon ECS - DEVELOPMENT

on:
  push:
    branches:
      - dev

env:
  AWS_REGION: ap-southeast-2                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: aimpcmsbackendstack-frontendrepo74b66850-dvyrwcoocftu           # set this to your Amazon ECR repository name
  ECS_SERVICE: AimpCmsBackendStack-AimpFrontendFargateServiceFC3D0C2D-IMTadQBaiBQB                 # set this to your Amazon ECS service name
  ECS_CLUSTER: aimp-frontend-fargate-cluster          # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/ecs-task-definition.json  # set this to the path to your Amazon ECS task definition
  CONTAINER_NAME: aimp-cms                   # set this to the name of the container in the
                                                      # containerDefinitions section of your task definition

jobs:
  deploy:
    permissions:
      id-token: write
      contents: read
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Apply Secrets to Env
        uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}

      - name: Configure AWS credentials for Dev
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          audience: sts.amazonaws.com
          aws-region: ap-southeast-2
          role-to-assume: arn:aws:iam::730335518230:role/Github-Actions

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          PORT: 3000
          DATABASE_URI: ${{ secrets.DATABASE_URI }}
          PAYLOAD_SECRET: ${{ secrets.PAYLOAD_SECRET }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --build-arg DATABASE_URI="${{ secrets.DATABASE_URI }}" \
            --build-arg PAYLOAD_SECRET="${{ secrets.PAYLOAD_SECRET }}" \
            --build-arg S3_ACCESS_KEY="${{ secrets.S3_ACCESS_KEY }}" \
            --build-arg S3_SECRET_KEY="${{ secrets.S3_SECRET_KEY }}" \
            --build-arg S3_BUCKET_NAME="${{ secrets.S3_BUCKET_NAME }}" \
            --build-arg S3_REGION="${{ secrets.S3_REGION }}" \
            --build-arg OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            .

          # Tag the image with SHA and 'latest'
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # If on main branch, also tag as 'prod'
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:prod
          fi

          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:prod
          fi

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
